const { PrismaClient } = require("@prisma/client");

const prisma = new PrismaClient();

async function seedCategories() {
  try {
    const categories = [
      { name: "–ó–∞–≤—Ç—Ä–∞–∫–∏", slug: "zavtraki" },
      { name: "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞", slug: "osnovnye-blyuda" },
      { name: "–î–µ—Å–µ—Ä—Ç—ã", slug: "deserty" },
      { name: "–°—É–ø—ã", slug: "supy" },
      { name: "–°–∞–ª–∞—Ç—ã", slug: "salaty" },
      { name: "–ù–∞–ø–∏—Ç–∫–∏", slug: "napitki" },
      { name: "–í—ã–ø–µ—á–∫–∞", slug: "vypechka" },
      { name: "–ó–∞–∫—É—Å–∫–∏", slug: "zakuski" },
    ];

    for (const category of categories) {
      const existingCategory = await prisma.category.findUnique({
        where: { slug: category.slug },
      });

      if (!existingCategory) {
        await prisma.category.create({
          data: category,
        });
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name}`);
      } else {
        console.log(`‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${category.name}`);
      }
    }

    console.log("\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", error);
  } finally {
    await prisma.$disconnect();
  }
}

seedCategories();
